'use client'

import React, { useState } from 'react'
import Link from 'next/link'
import {
  Box,
  Container,
  VStack,
  HStack,
  Text,
  Heading,
  Badge,
  SimpleGrid,
  Image
} from '@chakra-ui/react'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card, CardContent } from '@/components/ui/Card'
import { MainLayout } from '@/components/layouts/MainLayout'

// Mock data
const mockCoupons = [
  {
    id: '1',
    storeId: '1',
    title: 'ÂàùÂõûÈôêÂÆöÂâ≤Âºï',
    description: 'ÂàùÂõû„ÅîÂà©Áî®„ÅÆ„ÅäÂÆ¢ÊßòÈôêÂÆö„Åß10%OFFÔºÅ',
    type: 'percentage',
    value: 10,
    code: 'FIRST10',
    expiryDate: new Date('2024-12-31'),
    isActive: true,
    conditions: '3000ÂÜÜ‰ª•‰∏ä„ÅÆ„ÅîÂà©Áî®„ÅßÈÅ©Áî®',
    image: 'https://images.unsplash.com/photo-1560066984-138dadb4c035?w=400&h=200&fit=crop'
  },
  {
    id: '2',
    storeId: '1',
    title: '„É™„Éî„Éº„Çø„ÉºÂâ≤Âºï',
    description: '2ÂõûÁõÆ‰ª•Èôç„ÅÆ„ÅäÂÆ¢Êßò„Å´5%OFF',
    type: 'percentage',
    value: 5,
    code: 'REPEAT5',
    expiryDate: new Date('2024-12-31'),
    isActive: true,
    conditions: '5000ÂÜÜ‰ª•‰∏ä„ÅÆ„ÅîÂà©Áî®„ÅßÈÅ©Áî®',
    image: 'https://images.unsplash.com/photo-1521590832167-7bcbfaa6381f?w=400&h=200&fit=crop'
  },
  {
    id: '3',
    storeId: '2',
    title: '„Éç„Ç§„É´Êñ∞Ë¶è„Ç™„Éº„Éó„É≥',
    description: 'Êñ∞Ë¶è„Ç™„Éº„Éó„É≥Ë®òÂøµÔºÅÂàùÂõûÈôêÂÆö„Åß1000ÂÜÜOFF',
    type: 'fixed',
    value: 1000,
    code: 'NAILOPEN',
    expiryDate: new Date('2024-03-31'),
    isActive: false,
    conditions: '4000ÂÜÜ‰ª•‰∏ä„ÅÆ„ÅîÂà©Áî®„ÅßÈÅ©Áî®',
    image: 'https://images.unsplash.com/photo-1604654894610-df63bc536371?w=400&h=200&fit=crop'
  }
]

const mockStores = [
  { id: '1', name: 'Hair Studio TOKYO', category: 'HAIR_SALON' },
  { id: '2', name: 'Nail Art Paradise', category: 'NAIL_SALON' },
  { id: '3', name: 'Relax Spa & Massage', category: 'RELAXATION' }
]

export default function CouponsPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState(0)

  const activeCoupons = mockCoupons.filter(c =>
    c.isActive && new Date(c.expiryDate) > new Date()
  )
  const expiredCoupons = mockCoupons.filter(c =>
    !c.isActive || new Date(c.expiryDate) <= new Date()
  )

  const filteredActiveCoupons = activeCoupons.filter(coupon =>
    coupon.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    coupon.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ja-JP', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    }).format(new Date(date))
  }

  const getCouponTypeColor = (type: string) => {
    switch (type) {
      case 'percentage': return 'green'
      case 'fixed': return 'blue'
      case 'special': return 'purple'
      default: return 'gray'
    }
  }

  const getCouponTypeLabel = (type: string) => {
    switch (type) {
      case 'percentage': return '„Éë„Éº„Çª„É≥„ÉàÂâ≤Âºï'
      case 'fixed': return 'ÂÆöÈ°çÂâ≤Âºï'
      case 'special': return 'ÁâπÂà•„Ç™„Éï„Ç°„Éº'
      default: return type
    }
  }

  const CouponCard = ({ coupon, isExpired = false }: { coupon: any, isExpired?: boolean }) => {
    const store = mockStores.find(s => s.id === coupon.storeId)
    const color = getCouponTypeColor(coupon.type)

    return (
      <Card opacity={isExpired ? 0.6 : 1}>
        <CardContent p={0}>
          <VStack gap={0} align="stretch">
            {/* Header */}
            <Box
              position="relative"
              p={6}
              bgGradient={`linear(135deg, ${color}.500, ${color}.600)`}
              color="white"
              overflow="hidden"
            >
              <Box
                position="absolute"
                top="-20px"
                right="-20px"
                w="80px"
                h="80px"
                bg="white"
                opacity={0.1}
                borderRadius="full"
              />
              <Box
                position="absolute"
                bottom="-30px"
                left="-30px"
                w="100px"
                h="100px"
                bg="white"
                opacity={0.1}
                borderRadius="full"
              />

              <VStack align="start" gap={2} position="relative">
                <Badge
                  bg="white"
                  color={`${color}.600`}
                  px={2}
                  py={1}
                  borderRadius="full"
                  fontSize="xs"
                >
                  {getCouponTypeLabel(coupon.type)}
                </Badge>
                <Heading size="md" color="white">
                  {coupon.title}
                </Heading>
                <Text fontSize="sm" opacity={0.9}>
                  {store?.name}
                </Text>
              </VStack>
            </Box>

            {/* Content */}
            <Box p={4}>
              <VStack gap={4} align="stretch">
                <Text color="gray.700" fontSize="sm">
                  {coupon.description}
                </Text>

                <HStack justify="space-between" align="center">
                  <VStack align="start" gap={1}>
                    <Text fontSize="xs" color="gray.500">ÊúâÂäπÊúüÈôê</Text>
                    <Text fontSize="sm" fontWeight="600">
                      {formatDate(coupon.expiryDate)}
                    </Text>
                  </VStack>
                  <VStack align="end" gap={1}>
                    <Text fontSize="xs" color="gray.500">„ÇØ„Éº„Éù„É≥„Ç≥„Éº„Éâ</Text>
                    <Badge variant="outline" colorScheme={color}>
                      {coupon.code}
                    </Badge>
                  </VStack>
                </HStack>

                {coupon.conditions && (
                  <Box
                    p={3}
                    bg="gray.50"
                    borderRadius="md"
                    border="1px dashed"
                    borderColor="gray.200"
                  >
                    <Text fontSize="xs" color="gray.600" fontWeight="500">
                      Âà©Áî®Êù°‰ª∂: {coupon.conditions}
                    </Text>
                  </Box>
                )}

                <HStack justify="space-between" gap={3}>
                  {!isExpired ? (
                    <React.Fragment>
                      <Link href={`/stores/${coupon.storeId}`} style={{ flex: 1 }}>
                        <Button variant="outline" size="sm" fullWidth>
                          Â∫óËàóË©≥Á¥∞
                        </Button>
                      </Link>
                      <Button variant="primary" size="sm" flex={1}>
                        „ÇØ„Éº„Éù„É≥„Çí‰Ωø„ÅÜ
                      </Button>
                    </React.Fragment>
                  ) : (
                    <Button variant="ghost" size="sm" fullWidth disabled>
                      ÊúüÈôêÂàá„Çå
                    </Button>
                  )}
                </HStack>
              </VStack>
            </Box>
          </VStack>
        </CardContent>
      </Card>
    )
  }

  return (
    <MainLayout>
      <Container maxW="6xl" py={8}>
        <VStack gap={8} align="stretch">
          {/* Header */}
          <VStack gap={6} align="stretch">
            <VStack gap={4} align="center" textAlign="center">
              <Heading size="xl" color="gray.800">
                „ÇØ„Éº„Éù„É≥„Éª„Ç≠„É£„É≥„Éö„Éº„É≥
              </Heading>
              <Text color="gray.600" fontSize="lg" maxW="2xl">
                „ÅäÂæó„Å™„ÇØ„Éº„Éù„É≥„Å®„Ç≠„É£„É≥„Éö„Éº„É≥ÊÉÖÂ†±„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åó„Çá„ÅÜ
              </Text>
            </VStack>

            {/* Search */}
            <Box maxW="400px" mx="auto">
              <Input
                placeholder="üîç „ÇØ„Éº„Éù„É≥„ÇíÊ§úÁ¥¢..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </Box>
          </VStack>

          {/* Quick Stats */}
          <SimpleGrid columns={{ base: 2, md: 4 }} gap={4}>
            <Card>
              <CardContent p={6} textAlign="center">
                <VStack gap={2}>
                  <Text fontSize="2xl" fontWeight="bold" color="green.600">
                    {activeCoupons.length}
                  </Text>
                  <Text fontSize="sm" color="gray.600">
                    Âà©Áî®ÂèØËÉΩ„ÇØ„Éº„Éù„É≥
                  </Text>
                </VStack>
              </CardContent>
            </Card>

            <Card>
              <CardContent p={6} textAlign="center">
                <VStack gap={2}>
                  <Text fontSize="2xl" fontWeight="bold" color="gray.700">
                    {mockStores.length}
                  </Text>
                  <Text fontSize="sm" color="gray.600">
                    ÂèÇÂä†Â∫óËàóÊï∞
                  </Text>
                </VStack>
              </CardContent>
            </Card>

            <Card>
              <CardContent p={6} textAlign="center">
                <VStack gap={2}>
                  <Text fontSize="2xl" fontWeight="bold" color="purple.600">
                    15%
                  </Text>
                  <Text fontSize="sm" color="gray.600">
                    ÊúÄÂ§ßÂâ≤ÂºïÁéá
                  </Text>
                </VStack>
              </CardContent>
            </Card>

            <Card>
              <CardContent p={6} textAlign="center">
                <VStack gap={2}>
                  <Text fontSize="2xl" fontWeight="bold" color="orange.600">
                    2,000ÂÜÜ
                  </Text>
                  <Text fontSize="sm" color="gray.600">
                    ÊúÄÂ§ßÂâ≤ÂºïÈ°ç
                  </Text>
                </VStack>
              </CardContent>
            </Card>
          </SimpleGrid>

          {/* Tabs */}
          <VStack gap={6} align="stretch">
            {/* Tab Buttons */}
            <HStack gap={4}>
              <Button
                variant={activeTab === 0 ? "primary" : "outline"}
                onClick={() => setActiveTab(0)}
              >
                Âà©Áî®ÂèØËÉΩ ({filteredActiveCoupons.length})
              </Button>
              <Button
                variant={activeTab === 1 ? "primary" : "outline"}
                onClick={() => setActiveTab(1)}
              >
                ÊúüÈôêÂàá„Çå ({expiredCoupons.length})
              </Button>
            </HStack>

            {/* Tab Content */}
            {activeTab === 0 ? (
              /* Active Coupons */
              <VStack gap={6} align="stretch">
                {filteredActiveCoupons.length === 0 ? (
                  <Card>
                    <CardContent p={12} textAlign="center">
                      <VStack gap={4}>
                        <Text fontSize="5xl">üé´</Text>
                        <Heading size="md" color="gray.600">
                          {searchTerm ? 'Ë©≤ÂΩì„Åô„Çã„ÇØ„Éº„Éù„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' : '„ÇØ„Éº„Éù„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'}
                        </Heading>
                        <Text color="gray.500">
                          {searchTerm
                            ? 'Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
                            : 'Êñ∞„Åó„ÅÑ„ÇØ„Éº„Éù„É≥„ÅåËøΩÂä†„Åï„Çå„Çã„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ'
                          }
                        </Text>
                        {searchTerm && (
                          <Button variant="outline" onClick={() => setSearchTerm('')}>
                            Ê§úÁ¥¢„Çí„ÇØ„É™„Ç¢
                          </Button>
                        )}
                      </VStack>
                    </CardContent>
                  </Card>
                ) : (
                  <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} gap={6}>
                    {filteredActiveCoupons.map((coupon) => (
                      <CouponCard key={coupon.id} coupon={coupon} />
                    ))}
                  </SimpleGrid>
                )}
              </VStack>
            ) : (
              /* Expired Coupons */
              <VStack gap={6} align="stretch">
                {expiredCoupons.length === 0 ? (
                  <Card>
                    <CardContent p={12} textAlign="center">
                      <VStack gap={4}>
                        <Text fontSize="5xl">‚úÖ</Text>
                        <Heading size="md" color="gray.600">
                          ÊúüÈôêÂàá„Çå„ÅÆ„ÇØ„Éº„Éù„É≥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
                        </Heading>
                        <Text color="gray.500">
                          „Åô„Åπ„Å¶„ÅÆ„ÇØ„Éº„Éù„É≥„ÅåÊúâÂäπÊúüÈôêÂÜÖ„Åß„Åô
                        </Text>
                      </VStack>
                    </CardContent>
                  </Card>
                ) : (
                  <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} gap={6}>
                    {expiredCoupons.map((coupon) => (
                      <CouponCard key={coupon.id} coupon={coupon} isExpired />
                    ))}
                  </SimpleGrid>
                )}
              </VStack>
            )}
          </VStack>

          {/* Information */}
          <Box
            bg="yellow.50"
            p={6}
            borderRadius="lg"
            border="1px solid"
            borderColor="yellow.200"
          >
            <VStack gap={4} align="start">
              <Heading size="md" color="yellow.800">
                üìã „ÇØ„Éº„Éù„É≥„ÅîÂà©Áî®ÊôÇ„ÅÆÊ≥®ÊÑè‰∫ãÈ†Ö
              </Heading>
              <VStack align="start" gap={2} fontSize="sm" color="yellow.700">
                <Text>‚Ä¢ „ÇØ„Éº„Éù„É≥„ÅØ1Âõû„ÅÆ„Åî‰∫àÁ¥Ñ„Å´„Å§„Åç1Êûö„Åæ„ÅßÂà©Áî®ÂèØËÉΩ„Åß„Åô</Text>
                <Text>‚Ä¢ ‰ªñ„ÅÆ„Ç≠„É£„É≥„Éö„Éº„É≥„Å®„ÅÆ‰ΩµÁî®„ÅØ„Åß„Åç„Åæ„Åõ„Çì</Text>
                <Text>‚Ä¢ ÊúâÂäπÊúüÈôê„Çí„ÅîÁ¢∫Ë™ç„ÅÆ‰∏ä„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ</Text>
                <Text>‚Ä¢ „ÇØ„Éº„Éù„É≥„Ç≥„Éº„Éâ„ÅØ‰∫àÁ¥ÑÊôÇ„Å´„ÅîÂÖ•Âäõ„Åè„Å†„Åï„ÅÑ</Text>
                <Text>‚Ä¢ ‰∏ÄÈÉ®„Çµ„Éº„Éì„Çπ„Åß„ÅØ„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Å™„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô</Text>
              </VStack>
            </VStack>
          </Box>
        </VStack>
      </Container>
    </MainLayout>
  )
}